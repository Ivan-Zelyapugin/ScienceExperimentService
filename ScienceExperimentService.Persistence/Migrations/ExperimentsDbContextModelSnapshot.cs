// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScienceExperimentService.Persistence;

#nullable disable

namespace ScienceExperimentService.Persistence.Migrations
{
    [DbContext(typeof(ExperimentsDbContext))]
    partial class ExperimentsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("ScienceExperimentService.Domain.Entitys.Files", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Files");
                });

            modelBuilder.Entity("ScienceExperimentService.Domain.Entitys.Results", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AvgExperimentTime")
                        .HasColumnType("REAL");

                    b.Property<double>("AvgIndicator")
                        .HasColumnType("REAL");

                    b.Property<int>("ExperimentCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FirstExperimentStart")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastExperimentStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxExperimentTime")
                        .HasColumnType("INTEGER");

                    b.Property<float>("MaxIndicator")
                        .HasColumnType("REAL");

                    b.Property<double>("MedianIndicator")
                        .HasColumnType("REAL");

                    b.Property<int>("MinExperimentTime")
                        .HasColumnType("INTEGER");

                    b.Property<float>("MinIndicator")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Results");
                });

            modelBuilder.Entity("ScienceExperimentService.Domain.Entitys.Values", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<float>("Indicator")
                        .HasColumnType("REAL");

                    b.Property<int>("Time")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Values");
                });

            modelBuilder.Entity("ScienceExperimentService.Domain.Entitys.Results", b =>
                {
                    b.HasOne("ScienceExperimentService.Domain.Entitys.Files", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("ScienceExperimentService.Domain.Entitys.Values", b =>
                {
                    b.HasOne("ScienceExperimentService.Domain.Entitys.Files", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });
#pragma warning restore 612, 618
        }
    }
}
